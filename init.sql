CREATE TABLE IF NOT EXISTS public.places (
    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    location GEOGRAPHY(POINT) NOT NULL,
    type VARCHAR(255) NOT NULL,
    address VARCHAR(255),
    pet_size INTEGER,
    friendly_level INTEGER,
    additional_info JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create a spatial index on the location column
CREATE INDEX idx_places_location ON public.places USING GIST (location);

-- Create a function to update the updated_at column
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$
 LANGUAGE plpgsql;

-- Create a trigger to automatically update the updated_at column
CREATE TRIGGER update_places_modtime
BEFORE UPDATE ON public.places
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

-- User Info

CREATE TABLE IF NOT EXISTS public.user_info (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    avatar TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create an index on the name column for faster lookups
CREATE INDEX idx_user_info_name ON public.user_info (name);

CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$
 LANGUAGE plpgsql;

-- Create a trigger to automatically update the updated_at column
CREATE TRIGGER update_user_info_modtime
BEFORE UPDATE ON public.user_info
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();


--- pet info
CREATE TABLE IF NOT EXISTS public.pet_info (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID NOT NULL,
    name VARCHAR(255) NOT NULL,
    age INTEGER,
    type VARCHAR(100),
    size INTEGER,
    description TEXT,
    gender INTEGER CHECK (gender IN (0, 1, 2)),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for faster lookups
CREATE INDEX idx_pet_info_user_id ON public.pet_info (user_id);
CREATE INDEX idx_pet_info_name ON public.pet_info (name);
CREATE INDEX idx_pet_info_type ON public.pet_info (type);

-- Create a function to update the updated_at column (if not already created)
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$
 LANGUAGE plpgsql;

-- Create a trigger to automatically update the updated_at column
CREATE TRIGGER update_pet_info_modtime
BEFORE UPDATE ON public.pet_info
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

-- Add a foreign key constraint if user_id references the user_info table
ALTER TABLE public.pet_info
ADD CONSTRAINT fk_pet_info_user_id
FOREIGN KEY (user_id)
REFERENCES public.user_info(id)
ON DELETE CASCADE;



---- nearby places function 
CREATE OR REPLACE FUNCTION nearby_places(lat FLOAT, long FLOAT, type VARCHAR)
RETURNS TABLE (
    id public.places.id%TYPE,
    name public.places.name%TYPE,
    location public.places.location%TYPE,
    type public.places.type%TYPE,
    address public.places.address%TYPE,
    pet_size public.places.pet_size%TYPE,
    friendly_level public.places.friendly_level%TYPE,
    additional_info public.places.additional_info%TYPE,
    created_at public.places.created_at%TYPE,
    updated_at public.places.updated_at%TYPE,
    lat FLOAT,
    long FLOAT,
    dist_meters FLOAT
)
LANGUAGE sql
AS $$
  SELECT 
    id, name, location, type, address, pet_size, friendly_level, additional_info, created_at, updated_at,
    ST_Y(location::geometry) AS lat,
    ST_X(location::geometry) AS long,
    ST_Distance(location, ST_Point(long, lat)::geography) AS dist_meters
  FROM public.places
  WHERE type = $3
  ORDER BY location <-> ST_Point(long, lat)::geography;
$$
;


CREATE OR REPLACE FUNCTION places_within_radius(
    lat FLOAT, 
    long FLOAT, 
    radius_km FLOAT,
    place_type VARCHAR DEFAULT NULL
)
RETURNS TABLE (
    id public.places.id%TYPE,
    name public.places.name%TYPE,
    location public.places.location%TYPE,
    type public.places.type%TYPE,
    address public.places.address%TYPE,
    pet_size public.places.pet_size%TYPE,
    friendly_level public.places.friendly_level%TYPE,
    additional_info public.places.additional_info%TYPE,
    created_at public.places.created_at%TYPE,
    updated_at public.places.updated_at%TYPE,
    distance_meters FLOAT
)
LANGUAGE sql
AS $$
    SELECT 
        id, name, location, type, address, pet_size, friendly_level, 
        additional_info, created_at, updated_at,
        ST_Distance(location, ST_SetSRID(ST_MakePoint(long, lat), 4326)::geography) AS distance_meters
    FROM public.places
    WHERE ST_DWithin(
        location,
        ST_SetSRID(ST_MakePoint(long, lat), 4326)::geography,
        radius_km * 1000
    )
    AND (place_type IS NULL OR type = place_type)
    ORDER BY distance_meters;
$$
;